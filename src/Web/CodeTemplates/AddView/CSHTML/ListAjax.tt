<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn" #>
<#
MvcTextTemplateHost mvcHost = MvcTemplateHost;
#>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.
if(mvcHost.IsPartialView) {
#>

<#
} else if(mvcHost.IsContentPage) {
#>

@{
    ViewBag.Title = "<#= mvcHost.ViewName#>";
<#
if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {
#>
    Layout = "<#= mvcHost.MasterPageFile#>";
<#
}
#>
}

<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= mvcHost.ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}


#>


@section Breadcrumb
{
    <h3>
        <span>@ViewBag.Title</span>
        <small>Listagem</small>
    </h3>
    <ul class="breadcrumb">
        <li>
            <i class="icon-home"></i>
            <a href="#">@ViewBag.Title</a>
            <i class="icon-angle-right"></i>
        </li>
        <li>
            <a href="#">Listagem</a>
        </li>
    </ul>
}


@section head
{
    <style>
        .pagination ul > li, .pagination ul > div li, .pagination ul > div {
            float: left;
            list-style: none;
            display: inline;
        }

        .pagination ul > .active > a, .pagination ul > div .active > span {
            color: #999;
            cursor: default;
        }

        .pagination ul > div li > a:hover, .pagination ul > div li > a:focus, .pagination ul > div .active > a, .pagination ul > div .active > span {
            background-color: #f5f5f5;
        }

        .pagination ul > div li > a, .pagination ul > div li > span {
            float: left;
            padding: 4px 12px;
            line-height: 20px;
            text-decoration: none;
            background-color: #fff;
            border: 1px solid #ddd;
            border-left-width: 0;
        }
    </style>
}




@section Scripts
{
    <script src="~/Scripts/digdin-list-module.js"></script>
    <script>
        digdin.init();
        digdinList.init();
        var removeParent = function (resp, obj) {
            if (resp.Status)
                $('#ReloadList').click();
        };
        var getTrData = function (obj) {
            var data = {

            };
            data.id = (obj.closest('tr').data().Id);
            return data;
        };
    </script>
}


<div id="ListHolder">
    <form id="PaginationForm"
          data-dgd-data-list-holder="#ListHolder"
          data-dgd-target="#ListOut"
          data-dgd-source="@Url.Action("Get")"
          data-dgd-source-type="url"
          data-dgd-template="#ListTemplate"
          data-dgd-ajax-callback="$('#ListOut [type=checkbox]').uniform();"
          data-dgd-data-list-idattr="Id"
          data-dgd-data-list-pagination-object="Pagination"
          data-dgd-data-list-base-object="Objects"
          data-dgd-data-list-form="#PaginationForm"
          data-dgd-data-list-dateattr="CreatedDate"
          data-dgd-data-list="">
        <input type="hidden" name="Name" value="" />
        <input type="hidden" data-dgd-data-list-page="" name="Page" value="0" />
        <input type="hidden" name="PagesCount" data-dgd-data-list-pagescount="" value="0" />
        <input type="hidden" name="RegisterPerPages"
               data-dgd-data-list-registerperpage="" value="5" />
    </form>

    <div class="portlet box light-grey">
        <div class="portlet-title">
            <div class="caption"><i class="icon-globe"></i>@ViewBag.Title</div>
            <div class="tools">
                <a href="javascript:;" id="ReloadList"
                   data-dgd-click=""
                   data-dgd-action="dataList" data-dgd-data-list-target="#PaginationForm" class="reload"></a>
            </div>
        </div>
        <div class="portlet-body">
            <div class="clearfix">
                <div class="btn-group">
                    <a href="@Url.Action("Create")" class="btn green">
                        Criar <i class="icon-plus"></i>
                    </a>
                </div>
            </div>
            <div class="row-fluid">
                <div class="span6">
                    <div class="dataTables_length">
                        <label>
                            <select data-dgd-change=""
                                    data-dgd-data-list-filter-change=""
                                    data-dgd-data-list-holder="#ListHolder"
                                    data-dgd-target=""
                                    data-dgd-action="filterChange"
                                    data-dgd-data-list-target="#PaginationForm"
                                    name="RegisterPerPages" class="m-wrap small select2-offscreen">
                                <option value="5" selected="selected">5</option>
                                <option value="15">15</option>
                                <option value="20">20</option>
                            </select>
                            Registros por Página
                        </label>
                    </div>
                </div>
                <div class="span6">
                    <div class="dataTables_filter" style="text-align: right;">
                        <label>
                            Pesquisar:
                            <input data-dgd-keyup=""
                                   data-dgd-data-list-filter-change=""
                                   data-dgd-data-list-holder="#ListHolder"
                                   data-dgd-target=""
                                   data-dgd-action="filterChange"
                                   data-dgd-schedule="800"
                                   data-dgd-data-list-target="#PaginationForm"
                                   name="Name"
                                   type="text" aria-controls="sample_editable_1" class="m-wrap medium">
                        </label>
                    </div>
                </div>
            </div>
            <table class="table table-striped table-bordered table-hover" id="sample_1">
                <thead>
                    <tr>
					
                        <th style="width: 8px;">
                            <input type="checkbox" class="group-checkable" data-set="#sample_1 .checkboxes" />
                        </th>
						<#
						List<ModelProperty> properties = GetModelProperties(mvcHost.ViewDataType);
						foreach (ModelProperty property in properties) {
							if (!property.IsPrimaryKey && property.Scaffold) {
						#>
								<th><#= property.DisplayName #></th>
						<#
							}
						}
						#>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody id="ListOut"></tbody>
            </table>

            <div class="row-fluid">
                <div class="span6">
                    Total de Registros: <span data-dgd-data-list-registercount=""></span>

                    @*<div class="dataTables_info" id="sample_editable_1_info">Showing 1 to 5 of 6 entries</div>*@
                </div>
                <div class="span6">
                    <div class="dataTables_paginate paging_bootstrap pagination" style="margin: 0; text-align: right;">
                        <ul>
                            <li class="prev"
                                data-dgd-target=""
                                data-dgd-data-list-holder="#ListHolder"
                                data-dgd-click=""
                                data-dgd-action="prevPage"><a href="javascript:;">← Ante</a></li>
                            <div data-dgd-data-list-pagination-holder=""
                                 data-dgd-template="#PaginationTemplate">
                            </div>
                            <li data-dgd-target=""
                                data-dgd-data-list-holder="#ListHolder"
                                data-dgd-click=""
                                data-dgd-action="nextPage"
                                class="next"><a href="javascript:;">Próx → </a></li>
                        </ul>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>



<script type="text/html" id="PaginationTemplate">
    <li data-dgd-click=""
        data-dgd-data-list-holder="#ListHolder"
        data-dgd-action="goToPage"
        data-dgd-data-list-to-page="{page}">
        <a href="javascript:;">{pageLabel}</a>
    </li>
</script>

<script type="text/html" id="ListTemplate">
    <tr>
        <td>
            <input type="checkbox" class="checkboxes" value="1" />
        </td>
        <#
			List<ModelProperty> properties2 = GetModelProperties(mvcHost.ViewDataType);
			foreach (ModelProperty property in properties2) {
				if (!property.IsPrimaryKey && property.Scaffold) {
			#>
		<td>{<#= property.Name #>}</td>
			<#
				}
			}
			#>
        <td>
            <a href="@(HttpUtility.UrlDecode(Url.Action("Edit", "Contact", new { Id = "{id}" })))">editar</a>
            /
            <a data-dgd-click=""
               data-dgd-action="ajaxCall"
               data-dgd-source="@Url.Action("Remove")"
               data-dgd-source-type="url"
               data-dgd-ajax-callback="removeParent"
               data-dgd-source-data="getTrData"
               data-dgd-prevent-default=""
               data-dgd-confirm="Deseja realmente remover esse registro?"
               href="#">
                remover
            </a>
        </td>
    </tr>
</script>



<#
// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page
#>
<#
if(mvcHost.IsContentPage) {
#>
<#
} else if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string DisplayName { get; set; }
    public string AssociationName { get; set; }
    public string ValueExpression { get; set; }
    public string ModelValueExpression { get; set; }
    public string ItemValueExpression { get; set; }
    public Type UnderlyingType { get; set; }
    public bool IsPrimaryKey { get; set; }
    public bool IsForeignKey { get; set; }
    public bool IsReadOnly { get; set; }
    public bool Scaffold { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type) {
    List<ModelProperty> results = GetEligibleProperties(type);
    
    foreach (ModelProperty prop in results) {
        if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {
            prop.ModelValueExpression = "String.Format(\"{0:F}\", " + prop.ModelValueExpression + ")";
        }
        else if (prop.UnderlyingType == typeof(DateTime)) {
            prop.ModelValueExpression = "String.Format(\"{0:g}\", " + prop.ModelValueExpression + ")";
        }
    }

    return results;
}

// Call this to determine if property has scaffolding enabled
bool Scaffold(PropertyInfo property) {
    foreach (object attribute in property.GetCustomAttributes(true)) {
        var scaffoldColumn = attribute as ScaffoldColumnAttribute;
        if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {
            return false;
        }
    }
    return true;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
    if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    foreach (object attribute in property.GetCustomAttributes(true)) {
        if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
            return true;
        }
        
        var edmScalar = attribute as EdmScalarPropertyAttribute;
        if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
            return true;
        }

        var column = attribute as ColumnAttribute;
        if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
            return true;
        }
    }
    
    return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
    IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
    return pkNames.Count() == 1 ? pkNames.First() : null;
}

string GetDisplayName(PropertyInfo prop){
	foreach (object attribute in prop.GetCustomAttributes(true)) {
        var attributeCollum = attribute as DisplayNameAttribute;
        if (attributeCollum != null) {
            return attributeCollum.DisplayName;
        }
    }
	return prop.Name;
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
    return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

// Call this to determine if the property represents a foreign key.
bool IsForeignKey(PropertyInfo property) {
    return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);
}

// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID
string GetValueExpressionSuffix(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName + "." + propertyModel.DisplayPropertyName : property.Name;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
string GetAssociationName(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName : property.Name;
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type) {
    List<ModelProperty> results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {
            string valueExpression = GetValueExpressionSuffix(prop);

            results.Add(new ModelProperty {
                Name = prop.Name,
				DisplayName = GetDisplayName(prop),
                AssociationName = GetAssociationName(prop),
                ValueExpression = valueExpression,
                ModelValueExpression = "Model." + valueExpression,
                ItemValueExpression = "item." + valueExpression,
                UnderlyingType = underlyingType,
                IsPrimaryKey = IsPrimaryKey(prop),
                IsForeignKey = IsForeignKey(prop),
                IsReadOnly = prop.GetSetMethod() == null,
                Scaffold = Scaffold(prop)
            });
        }
    }

    return results;
}

// Helper
bool IsBindableType(Type type) {
    return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}

MvcTextTemplateHost MvcTemplateHost {
    get {
        return (MvcTextTemplateHost)Host;
    }
}
#>